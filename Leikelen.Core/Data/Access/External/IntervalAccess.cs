using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using cl.uv.leikelen.API.DataAccess;
using cl.uv.leikelen.Data.Model;

namespace cl.uv.leikelen.Data.Access.External
{
    /// <summary>
    /// Interface to get or add intervals to a person
    /// </summary>
    /// <seealso cref="cl.uv.leikelen.API.DataAccess.IIntervalAccess" />
    public class IntervalAccess : IIntervalAccess
    {
        /// <summary>
        /// Gets all intervals of a person, modal and submodal type.
        /// </summary>
        /// <param name="person">The person object.</param>
        /// <param name="modalName">Name of the modal type.</param>
        /// <param name="subModalName">Name of the sub modal type.</param>
        /// <returns>List of Intervals</returns>
        public List<Interval> GetAll(Person person, string modalName, string subModalName)
        {
            var personInScene = Internal.SceneInUse.Instance.Scene?.PersonsInScene?.Find(pis => pis.Person.Equals(person));
            var subModalPersonInScene = personInScene?.SubModalType_PersonInScenes?.Find(smtPis => smtPis.SubModalType.SubModalTypeId.Equals(subModalName) && smtPis.SubModalType.ModalType.ModalTypeId.Equals(modalName));
            var intervalRepresent = subModalPersonInScene?.RepresentTypes?.FindAll(rt => !ReferenceEquals(null,  rt.IntervalData) && ReferenceEquals(null,  rt.EventData) && !rt.Index.HasValue);
            if(ReferenceEquals(null,  intervalRepresent) || intervalRepresent.Count == 0)
            {
                return null;
            }
            else
            {
                List<Interval> intervalList = new List<Interval>();
                foreach (var interval in intervalRepresent)
                {
                    intervalList.Add(new Interval()
                    {
                        Value = interval.Value,
                        Subtitle = interval.Subtitle,
                        Index = interval.Index,
                        StartTime = interval.IntervalData.StartTime,
                        EndTime = interval.IntervalData.EndTime
                    });
                }
                return intervalList.OrderBy(id => id.StartTime).ToList();
            }
        }

        /// <summary>
        /// Create intervals From a list of events.
        /// </summary>
        /// <param name="person">The person object.</param>
        /// <param name="modalName">Name of the modal type.</param>
        /// <param name="subModalName">Name of the sub modal type.</param>
        /// <param name="millisecondsThreshold">The milliseconds threshold
        /// When an event and the next are separated by this threshold or more, a new interval is created.</param>
        /// <param name="which">The parameter "ToInterval" of the event, which list of events to take in account.</param>
        /// <param name="intervalName">Name of the interval (new submodal type in the given modal type).</param>
        public void FromEvent(Person person, string modalName, string subModalName, int millisecondsThreshold, int which, string intervalName)
        {
            var eventAccess = new EventAccess();
            var events = eventAccess.GetAll(person, modalName, subModalName);
            if (ReferenceEquals(null, events))
                throw new Exception("There are no events in ModalType:" + modalName + " and subModal:" + subModalName);
            new SubModalAccess().AddIfNotExists(modalName, intervalName, "Autogenerated", null);
            TimeSpan? start = null, end = null;

            foreach (var timeEvent in events)
            {
                if (!timeEvent.toInterval.Equals(which))
                    continue;
                if (!start.HasValue && !end.HasValue)
                {
                    start = timeEvent.EventTime;
                    end = timeEvent.EventTime;
                }
                else if(end.HasValue && timeEvent.EventTime.Subtract(end.Value).TotalMilliseconds >= millisecondsThreshold)
                {
                    Add(person, modalName, intervalName, start.Value, end.Value);
                    start = timeEvent.EventTime;
                }
                end = timeEvent.EventTime;

            }
            if (start.HasValue && end.HasValue)
            {
                Add(person, modalName, intervalName, start.Value, end.Value);
            }
        }

        #region public add methods
        /// <summary>
        /// Adds an interval to the specified person.
        /// </summary>
        /// <param name="person">The person object.</param>
        /// <param name="modalName">Name of the modal type.</param>
        /// <param name="subModalName">Name of the sub modal type.</param>
        /// <param name="startTime">The start time.</param>
        /// <param name="endTime">The end time.</param>
        /// <param name="value">The value.</param>
        public void Add(Person person, string modalName, string subModalName, TimeSpan startTime, TimeSpan endTime, double value)
        {
            InternalAdd(person, modalName, subModalName, startTime, endTime, value, null);
        }

        /// <summary>
        /// Adds an interval to the specified person.
        /// </summary>
        /// <param name="person">The person.</param>
        /// <param name="modalName">Name of the modal.</param>
        /// <param name="subModalName">Name of the sub modal.</param>
        /// <param name="startTime">The start time.</param>
        /// <param name="endTime">The end time.</param>
        /// <param name="value">The value.</param>
        /// <param name="subtitle">The text content in the interval.</param>
        public void Add(Person person, string modalName, string subModalName, TimeSpan startTime, TimeSpan endTime, double value, string subtitle)
        {
            InternalAdd(person, modalName, subModalName, startTime, endTime, value, subtitle);
        }

        /// <summary>
        /// Adds an interval to the specified person.
        /// </summary>
        /// <param name="person">The person.</param>
        /// <param name="modalName">Name of the modal.</param>
        /// <param name="subModalName">Name of the sub modal.</param>
        /// <param name="startTime">The start time.</param>
        /// <param name="endTime">The end time.</param>
        /// <param name="subtitle">The text content in the interval.</param>
        public void Add(Person person, string modalName, string subModalName, TimeSpan startTime, TimeSpan endTime, string subtitle)
        {
            InternalAdd(person, modalName, subModalName, startTime, endTime, null, subtitle);
        }

        /// <summary>
        /// Adds an interval to the specified person.
        /// </summary>
        /// <param name="person">The person.</param>
        /// <param name="modalName">Name of the modal.</param>
        /// <param name="subModalName">Name of the sub modal.</param>
        /// <param name="startTime">The start time.</param>
        /// <param name="endTime">The end time.</param>
        public void Add(Person person, string modalName, string subModalName, TimeSpan startTime, TimeSpan endTime)
        {
            InternalAdd(person, modalName, subModalName, startTime, endTime, null, null);
        }
        #endregion

        private void InternalAdd(Person person, string modalName, string subModalName, TimeSpan startTime, TimeSpan endTime, double? value, string subtitle)
        {
            try
            {
                var subModalPersonInScene = TypeValidation.GetSmtPis(person, modalName, subModalName);

                //create interval and add to smtPis
                IntervalData intervalElement = new IntervalData()
                {
                    StartTime = startTime,
                    EndTime = endTime
                };
                subModalPersonInScene.RepresentTypes.Add(new RepresentType()
                {
                    Value = value,
                    Subtitle = subtitle,
                    Index = null,
                    IntervalData = intervalElement,
                    SubModalType_PersonInScene = subModalPersonInScene
                });
            }
            catch(Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message);
            }
        }
    }
}
