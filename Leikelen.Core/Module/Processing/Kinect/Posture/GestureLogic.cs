using cl.uv.leikelen.API.DataAccess;
using cl.uv.leikelen.API.FrameProvider.Kinect;
using cl.uv.leikelen.Data.Access;
using cl.uv.leikelen.Data.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace cl.uv.leikelen.Module.Processing.Kinect.Posture
{
    /// <summary>
    /// Logic for processing module to calculates the postures.
    /// </summary>
    public class GestureLogic
    {
        
        /// <summary>
        /// The data access facade
        /// </summary>
        private API.DataAccess.IDataAccessFacade _dataAccessFacade = new DataAccessFacade();
        /// <summary>
        /// List of tuples of person ids and its discrete gestures. Used to create the intervals from the events.
        /// </summary>
        private List<Tuple<Data.Model.Person, string>> _discreteGestures;

        /// <summary>
        /// The processed discrete gesture names processed in the current instance.
        /// This checks before the database, to speed up and minimize the database queries.
        /// </summary>
        private List<string> _processedDiscreteGestureNames;
        /// <summary>
        /// The processed continuous gesture names in the current instance.
        /// This checks before the database, to speed up and minimize the database queries.
        /// </summary>
        private List<string> _processedContinuousGestureNames;

        /// <summary>
        /// Initializes a new instance of the <see cref="GestureLogic"/> class.
        /// Initialize the attributes, and check if exists the discrete and continuous modal types.
        /// </summary>
        public GestureLogic()
        {
            _dataAccessFacade = new DataAccessFacade();
            _discreteGestures = new List<Tuple<Person, string>>();
            _processedDiscreteGestureNames = new List<string>();
            _processedContinuousGestureNames = new List<string>();

            _dataAccessFacade.GetModalAccess().AddIfNotExists("Discrete Posture",
                "Evaluates every moment and return true or false");
            _dataAccessFacade.GetModalAccess().AddIfNotExists("Continuous Posture",
                "Evaluates every moment and return a number associated to the progress");
        }

        /// <summary>
        /// Listener of Kinect gesture frames.
        /// </summary>
        /// <param name="sender">The sender object.</param>
        /// <param name="e">The kinect gesture frame.</param>
        public void Gesture_FrameArrived(object sender, API.FrameProvider.Kinect.KinectGestureFrameArrivedArgs e)
        {
            CheckPerson.Instance.CheckIfExistsPerson(e.TrackingId);
            if (e.Time.HasValue)
            {
                //process discrete gestures
                if(!ReferenceEquals(null, e?.Frame?.DiscreteGestureResults))
                {
                    foreach (var discreteGesture in e.Frame.DiscreteGestureResults)
                    {
                        if (discreteGesture.Value.Detected)
                        {
                            var tuple = new Tuple<Person, string>(CheckPerson.Instance.PersonsId[e.TrackingId], discreteGesture.Key.Name);
                            if (!_discreteGestures.Exists(d => d.Equals(tuple)))
                                _discreteGestures.Add(tuple);
                            //check in the variable if has processed, if not, check in the database and then add it to variable
                            if (!_processedDiscreteGestureNames.Exists(pd => pd.Equals(discreteGesture.Key.Name)))
                            {
                                _dataAccessFacade.GetSubModalAccess().AddIfNotExists("Discrete Posture", discreteGesture.Key.Name, "Autogenerated", null);
                                _processedDiscreteGestureNames.Add(discreteGesture.Key.Name);
                            }
                            if(discreteGesture.Value.Detected)
                                _dataAccessFacade.GetEventAccess().Add(CheckPerson.Instance.PersonsId[e.TrackingId], "Discrete Posture", discreteGesture.Key.Name, e.Time.Value, discreteGesture.Value.Confidence, 1);
                            else
                                _dataAccessFacade.GetEventAccess().Add(CheckPerson.Instance.PersonsId[e.TrackingId], "Discrete Posture", discreteGesture.Key.Name, e.Time.Value, discreteGesture.Value.Confidence, -1);
                        }
                    }
                }
                    
                //process continuous gestures
                if(!ReferenceEquals(null, e?.Frame?.ContinuousGestureResults))
                {
                    foreach (var continuousGesture in e.Frame.ContinuousGestureResults)
                    {
                        //check in the variable if has processed, if not, check in the database and then add it to variable
                        if (!_processedDiscreteGestureNames.Exists(pd => pd.Equals(continuousGesture.Key.Name)))
                        {
                            _dataAccessFacade.GetSubModalAccess().AddIfNotExists("Continuous Posture", continuousGesture.Key.Name, "Autogenerated", null);
                            _processedDiscreteGestureNames.Add(continuousGesture.Key.Name);
                        }
                        _dataAccessFacade.GetEventAccess().Add(CheckPerson.Instance.PersonsId[e.TrackingId], "Continuous Posture", continuousGesture.Key.Name, e.Time.Value, continuousGesture.Value.Progress, -1);
                    }
                }
                    
                
            }
        }

        public void StopRecording()
        {
            foreach(var postureInPerson in _discreteGestures)
            {
                try
                {
                    _dataAccessFacade.GetIntervalAccess().FromEvent(postureInPerson.Item1,
                    "Discrete Posture",
                    postureInPerson.Item2, 
                    DataAccessFacade.Instance.GetGeneralSettings().GetDefaultMillisecondsThreshold(),
                    1,
                    postureInPerson.Item2);
                }
                catch(Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine(ex.Message);
                }
                
            }
        }
    }
}
