using cl.uv.leikelen.API.DataAccess;
using cl.uv.leikelen.API.FrameProvider.Kinect;
using cl.uv.leikelen.Data.Access;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace cl.uv.leikelen.Module.Processing.Kinect.Posture
{
    public class GestureLogic
    {
        /// <summary>
        /// Dictionary that match the kinect tracking id with the persons identifier
        /// </summary>
        private readonly Dictionary<ulong, int> _personsId;
        /// <summary>
        /// The data access facade
        /// </summary>
        private IDataAccessFacade _dataAccessFacade = new DataAccessFacade();
        /// <summary>
        /// List of tuples of personids and its discrete gestures. Used to create the intervals from the events.
        /// </summary>
        private List<Tuple<int, string>> _discreteGestures;

        /// <summary>
        /// The processed discrete gesture names processed in the current instance.
        /// This checks before the database, to speed up and minimize the database queries.
        /// </summary>
        private List<string> _processedDiscreteGestureNames;
        /// <summary>
        /// The processed continuous gesture names in the current instance.
        /// This checks before the database, to speed up and minimize the database queries.
        /// </summary>
        private List<string> _processedContinuousGestureNames;

        /// <summary>
        /// Initializes a new instance of the <see cref="GestureLogic"/> class.
        /// Initialize the attributes, and check if exists the discrete and continuous modals.
        /// </summary>
        public GestureLogic()
        {
            _personsId = new Dictionary<ulong, int>();
            _dataAccessFacade = new DataAccessFacade();
            _discreteGestures = new List<Tuple<int, string>>();
            _processedDiscreteGestureNames = new List<string>();
            _processedContinuousGestureNames = new List<string>();

            _dataAccessFacade.GetModalAccess().AddIfNotExists("Discrete Posture",
                "Evaluates every moment and return true or false");
            _dataAccessFacade.GetModalAccess().AddIfNotExists("Continuous Posture",
                "Evaluates every moment and return a number associated to the progress");
        }

        /// <summary>
        /// Listener of Kinect gesture frames.
        /// </summary>
        /// <param name="sender">The sender object.</param>
        /// <param name="e">The kinect gesture frame.</param>
        public void Gesture_FrameArrived(object sender, KinectGestureFrameArrivedArgs e)
        {
            CheckIfExistsPerson(e.TrackingId);
            if (e.Time.HasValue)
            {
                //process discrete gestures
                if(!ReferenceEquals(null, e?.Frame?.DiscreteGestureResults))
                {
                    foreach (var discreteGesture in e.Frame.DiscreteGestureResults)
                    {
                        if (discreteGesture.Value.Detected)
                        {
                            var tuple = new Tuple<int, string>(_personsId[e.TrackingId], discreteGesture.Key.Name);
                            if (!_discreteGestures.Exists(d => d.Equals(tuple)))
                                _discreteGestures.Add(tuple);
                            //check in the variable if has processed, if not, check in the database and then add it to variable
                            if (!_processedDiscreteGestureNames.Exists(pd => pd.Equals(discreteGesture.Key.Name)))
                            {
                                _dataAccessFacade.GetSubModalAccess().AddIfNotExists("Discrete Posture", discreteGesture.Key.Name, "Autogenerated", null);
                                _processedDiscreteGestureNames.Add(discreteGesture.Key.Name);
                            }
                            if(discreteGesture.Value.Detected)
                                _dataAccessFacade.GetEventAccess().Add(_personsId[e.TrackingId], "Discrete Posture", discreteGesture.Key.Name, e.Time.Value, discreteGesture.Value.Confidence, true);
                            else
                                _dataAccessFacade.GetEventAccess().Add(_personsId[e.TrackingId], "Discrete Posture", discreteGesture.Key.Name, e.Time.Value, discreteGesture.Value.Confidence, false);
                        }
                    }
                }
                    
                //process continuous gestures
                if(!ReferenceEquals(null, e?.Frame?.ContinuousGestureResults))
                {
                    foreach (var continuousGesture in e.Frame.ContinuousGestureResults)
                    {
                        //check in the variable if has processed, if not, check in the database and then add it to variable
                        if (!_processedDiscreteGestureNames.Exists(pd => pd.Equals(continuousGesture.Key.Name)))
                        {
                            _dataAccessFacade.GetSubModalAccess().AddIfNotExists("Continuous Posture", continuousGesture.Key.Name, "Autogenerated", null);
                            _processedDiscreteGestureNames.Add(continuousGesture.Key.Name);
                        }
                        _dataAccessFacade.GetEventAccess().Add(_personsId[e.TrackingId], "Continuous Posture", continuousGesture.Key.Name, e.Time.Value, continuousGesture.Value.Progress, false);
                    }
                }
                    
                
            }
        }

        public void StopRecording()
        {
            foreach(var postureInPerson in _discreteGestures)
            {
                _dataAccessFacade.GetIntervalAccess().FromEvent(postureInPerson.Item1, 
                    "Discrete Posture", 
                    postureInPerson.Item2, DataAccessFacade.Instance.GetGeneralSettings().GetDefaultMillisecondsThreshold());
            }
        }

        /// <summary>
        /// Check if the person is in the dictionary, if not, check if the person
        /// is in the scene (checking by the name), if yes, add it to the dictionary,
        /// if not, create a new person and adds it to the scene and dictionary
        /// </summary>
        /// <param name="bodyTrackingId">The kinect body tracking identifier.</param>
        private void CheckIfExistsPerson(ulong bodyTrackingId)
        {
            if (!_personsId.ContainsKey(bodyTrackingId))
            {
                bool isPersonInScene = false;
                string personName = "Kinect" + bodyTrackingId;
                var personsInScene = _dataAccessFacade.GetSceneInUseAccess()?.GetScene()?.PersonsInScene;
                foreach (var personInScene in personsInScene)
                {
                    string name = personInScene?.Person?.Name;
                    if (!ReferenceEquals(null, name) && name.Equals(personName))
                    {
                        _personsId[bodyTrackingId] = personInScene.Person.PersonId;
                        isPersonInScene = true;
                        break;
                    }
                }
                if (!isPersonInScene)
                {
                    var newPerson = _dataAccessFacade.GetPersonAccess().Add(personName, null, null, null);
                    _personsId[bodyTrackingId] = newPerson.PersonId;
                    _dataAccessFacade.GetPersonAccess().AddToScene(newPerson, _dataAccessFacade.GetSceneInUseAccess()?.GetScene());
                }
            }
        }
    }
}
